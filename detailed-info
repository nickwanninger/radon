-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.11 from src/Radon/Parser/Parser.y
-----------------------------------------------------------------------------

state 4 contains 9 shift/reduce conflicts.
state 9 contains 1 shift/reduce conflicts.
state 27 contains 1 shift/reduce conflicts.
state 31 contains 1 shift/reduce conflicts.
state 32 contains 8 shift/reduce conflicts.
state 38 contains 1 shift/reduce conflicts.
state 39 contains 1 shift/reduce conflicts.

terminal ';' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseModule -> module                       (0)
	%start_parseExpr -> exp                            (1)
	module -> topdecls                                 (2)
	topdecls -> topdecls topdecl                       (3)
	topdecls ->                                        (4)
	topdecl -> letBinding                              (5)
	arguments -> arguments_                            (6)
	arguments_ -> arguments_ apat                      (7)
	arguments_ ->                                      (8)
	apat -> var                                        (9)
	apat -> '_'                                        (10)
	apat -> int                                        (11)
	apat -> double                                     (12)
	ofcases -> ofcases_                                (13)
	ofcases_ -> ofcases_ 'of' arguments '=' exp        (14)
	ofcases_ ->                                        (15)
	letBinding -> 'let' var arguments '=' exp          (16)
	letBinding -> 'let' var ofcases                    (17)
	aexp -> '(' ')'                                    (18)
	aexp -> '(' explist ')'                            (19)
	aexp -> '-' aexp                                   (20)
	aexp -> 'if' exp 'then' exp 'else' exp             (21)
	aexp -> aexp1                                      (22)
	aexp1 -> var                                       (23)
	aexp1 -> literal                                   (24)
	aexp1 -> lam arguments '->' exp                    (25)
	literal -> listlit                                 (26)
	literal -> int                                     (27)
	literal -> double                                  (28)
	listlit -> '[' ']'                                 (29)
	listlit -> '[' explist ']'                         (30)
	listlit -> aexp ':' aexp                           (31)
	explist -> explist ',' exp                         (32)
	explist -> exp                                     (33)
	fexp -> aexp appargs                               (34)
	fexp -> aexp                                       (35)
	appargs -> appargs aexp                            (36)
	appargs -> aexp                                    (37)
	op -> varop                                        (38)
	infixop -> fexp                                    (39)
	infixop -> infixop op fexp                         (40)
	exp -> infixop                                     (41)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'let'          { Tok _ (TLet) }
	'of'           { Tok _ (TOf) }
	'if'           { Tok _ (TIf) }
	'then'         { Tok _ (TThen) }
	'else'         { Tok _ (TElse) }
	';'            { Tok _ (TSemi) }
	'='            { Tok _ (TEquals) }
	var            { Tok _ (TIdent $$) }
	'-'            { Tok _ (TOper "-") }
	varop          { Tok _ (TOper $$) }
	'('            { Tok _ (TLParen) }
	')'            { Tok _ (TRParen) }
	double         { Tok _ (TDouble $$) }
	int            { Tok _ (TInt $$) }
	':'            { Tok _ (TColon) }
	','            { Tok _ (TComma) }
	'['            { Tok _ (TLSquare) }
	']'            { Tok _ (TRSquare) }
	'_'            { Tok _ (TUnder) }
	'->'           { Tok _ (TArrow) }
	lam            { Tok _ (TLam) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseModule rule  0
	%start_parseExpr rule  1
	module          rule  2
	topdecls        rules 3, 4
	topdecl         rule  5
	arguments       rule  6
	arguments_      rules 7, 8
	apat            rules 9, 10, 11, 12
	ofcases         rule  13
	ofcases_        rules 14, 15
	letBinding      rules 16, 17
	aexp            rules 18, 19, 20, 21, 22
	aexp1           rules 23, 24, 25
	literal         rules 26, 27, 28
	listlit         rules 29, 30, 31
	explist         rules 32, 33
	fexp            rules 34, 35
	appargs         rules 36, 37
	op              rule  38
	infixop         rules 39, 40
	exp             rule  41

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'let'          reduce using rule 4
	%eof           reduce using rule 4

	module         goto state 19
	topdecls       goto state 3

State 1


	'if'           shift, and enter state 11
	var            shift, and enter state 12
	'-'            shift, and enter state 13
	'('            shift, and enter state 14
	double         shift, and enter state 15
	int            shift, and enter state 16
	'['            shift, and enter state 17
	lam            shift, and enter state 18

	aexp           goto state 4
	aexp1          goto state 5
	literal        goto state 6
	listlit        goto state 7
	fexp           goto state 8
	infixop        goto state 9
	exp            goto state 10

State 2



	topdecls       goto state 3

State 3

	module -> topdecls .                                (rule 2)
	topdecls -> topdecls . topdecl                      (rule 3)

	'let'          shift, and enter state 36
	%eof           reduce using rule 2

	topdecl        goto state 34
	letBinding     goto state 35

State 4

	listlit -> aexp . ':' aexp                          (rule 31)
	fexp -> aexp . appargs                              (rule 34)
	fexp -> aexp .                                      (rule 35)

	'let'          reduce using rule 35
	'of'           reduce using rule 35
	'if'           shift, and enter state 11
			(reduce using rule 35)

	'then'         reduce using rule 35
	'else'         reduce using rule 35
	var            shift, and enter state 12
			(reduce using rule 35)

	'-'            shift, and enter state 13
			(reduce using rule 35)

	varop          reduce using rule 35
	'('            shift, and enter state 14
			(reduce using rule 35)

	')'            reduce using rule 35
	double         shift, and enter state 15
			(reduce using rule 35)

	int            shift, and enter state 16
			(reduce using rule 35)

	':'            shift, and enter state 33
			(reduce using rule 35)

	','            reduce using rule 35
	'['            shift, and enter state 17
			(reduce using rule 35)

	']'            reduce using rule 35
	lam            shift, and enter state 18
			(reduce using rule 35)

	%eof           reduce using rule 35

	aexp           goto state 31
	aexp1          goto state 5
	literal        goto state 6
	listlit        goto state 7
	appargs        goto state 32

State 5

	aexp -> aexp1 .                                     (rule 22)

	'let'          reduce using rule 22
	'of'           reduce using rule 22
	'if'           reduce using rule 22
	'then'         reduce using rule 22
	'else'         reduce using rule 22
	var            reduce using rule 22
	'-'            reduce using rule 22
	varop          reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	double         reduce using rule 22
	int            reduce using rule 22
	':'            reduce using rule 22
	','            reduce using rule 22
	'['            reduce using rule 22
	']'            reduce using rule 22
	lam            reduce using rule 22
	%eof           reduce using rule 22


State 6

	aexp1 -> literal .                                  (rule 24)

	'let'          reduce using rule 24
	'of'           reduce using rule 24
	'if'           reduce using rule 24
	'then'         reduce using rule 24
	'else'         reduce using rule 24
	var            reduce using rule 24
	'-'            reduce using rule 24
	varop          reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	double         reduce using rule 24
	int            reduce using rule 24
	':'            reduce using rule 24
	','            reduce using rule 24
	'['            reduce using rule 24
	']'            reduce using rule 24
	lam            reduce using rule 24
	%eof           reduce using rule 24


State 7

	literal -> listlit .                                (rule 26)

	'let'          reduce using rule 26
	'of'           reduce using rule 26
	'if'           reduce using rule 26
	'then'         reduce using rule 26
	'else'         reduce using rule 26
	var            reduce using rule 26
	'-'            reduce using rule 26
	varop          reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	double         reduce using rule 26
	int            reduce using rule 26
	':'            reduce using rule 26
	','            reduce using rule 26
	'['            reduce using rule 26
	']'            reduce using rule 26
	lam            reduce using rule 26
	%eof           reduce using rule 26


State 8

	infixop -> fexp .                                   (rule 39)

	'let'          reduce using rule 39
	'of'           reduce using rule 39
	'if'           reduce using rule 39
	'then'         reduce using rule 39
	'else'         reduce using rule 39
	var            reduce using rule 39
	'-'            reduce using rule 39
	varop          reduce using rule 39
	'('            reduce using rule 39
	')'            reduce using rule 39
	double         reduce using rule 39
	int            reduce using rule 39
	':'            reduce using rule 39
	','            reduce using rule 39
	'['            reduce using rule 39
	']'            reduce using rule 39
	lam            reduce using rule 39
	%eof           reduce using rule 39


State 9

	infixop -> infixop . op fexp                        (rule 40)
	exp -> infixop .                                    (rule 41)

	'let'          reduce using rule 41
	'of'           reduce using rule 41
	'if'           reduce using rule 41
	'then'         reduce using rule 41
	'else'         reduce using rule 41
	var            reduce using rule 41
	'-'            reduce using rule 41
	varop          shift, and enter state 30
			(reduce using rule 41)

	'('            reduce using rule 41
	')'            reduce using rule 41
	double         reduce using rule 41
	int            reduce using rule 41
	':'            reduce using rule 41
	','            reduce using rule 41
	'['            reduce using rule 41
	']'            reduce using rule 41
	lam            reduce using rule 41
	%eof           reduce using rule 41

	op             goto state 29

State 10

	%start_parseExpr -> exp .                           (rule 1)

	%eof           accept


State 11

	aexp -> 'if' . exp 'then' exp 'else' exp            (rule 21)

	'if'           shift, and enter state 11
	var            shift, and enter state 12
	'-'            shift, and enter state 13
	'('            shift, and enter state 14
	double         shift, and enter state 15
	int            shift, and enter state 16
	'['            shift, and enter state 17
	lam            shift, and enter state 18

	aexp           goto state 4
	aexp1          goto state 5
	literal        goto state 6
	listlit        goto state 7
	fexp           goto state 8
	infixop        goto state 9
	exp            goto state 28

State 12

	aexp1 -> var .                                      (rule 23)

	'let'          reduce using rule 23
	'of'           reduce using rule 23
	'if'           reduce using rule 23
	'then'         reduce using rule 23
	'else'         reduce using rule 23
	var            reduce using rule 23
	'-'            reduce using rule 23
	varop          reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	double         reduce using rule 23
	int            reduce using rule 23
	':'            reduce using rule 23
	','            reduce using rule 23
	'['            reduce using rule 23
	']'            reduce using rule 23
	lam            reduce using rule 23
	%eof           reduce using rule 23


State 13

	aexp -> '-' . aexp                                  (rule 20)

	'if'           shift, and enter state 11
	var            shift, and enter state 12
	'-'            shift, and enter state 13
	'('            shift, and enter state 14
	double         shift, and enter state 15
	int            shift, and enter state 16
	'['            shift, and enter state 17
	lam            shift, and enter state 18

	aexp           goto state 27
	aexp1          goto state 5
	literal        goto state 6
	listlit        goto state 7

State 14

	aexp -> '(' . ')'                                   (rule 18)
	aexp -> '(' . explist ')'                           (rule 19)

	'if'           shift, and enter state 11
	var            shift, and enter state 12
	'-'            shift, and enter state 13
	'('            shift, and enter state 14
	')'            shift, and enter state 26
	double         shift, and enter state 15
	int            shift, and enter state 16
	'['            shift, and enter state 17
	lam            shift, and enter state 18

	aexp           goto state 4
	aexp1          goto state 5
	literal        goto state 6
	listlit        goto state 7
	explist        goto state 25
	fexp           goto state 8
	infixop        goto state 9
	exp            goto state 23

State 15

	literal -> double .                                 (rule 28)

	'let'          reduce using rule 28
	'of'           reduce using rule 28
	'if'           reduce using rule 28
	'then'         reduce using rule 28
	'else'         reduce using rule 28
	var            reduce using rule 28
	'-'            reduce using rule 28
	varop          reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28
	double         reduce using rule 28
	int            reduce using rule 28
	':'            reduce using rule 28
	','            reduce using rule 28
	'['            reduce using rule 28
	']'            reduce using rule 28
	lam            reduce using rule 28
	%eof           reduce using rule 28


State 16

	literal -> int .                                    (rule 27)

	'let'          reduce using rule 27
	'of'           reduce using rule 27
	'if'           reduce using rule 27
	'then'         reduce using rule 27
	'else'         reduce using rule 27
	var            reduce using rule 27
	'-'            reduce using rule 27
	varop          reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	double         reduce using rule 27
	int            reduce using rule 27
	':'            reduce using rule 27
	','            reduce using rule 27
	'['            reduce using rule 27
	']'            reduce using rule 27
	lam            reduce using rule 27
	%eof           reduce using rule 27


State 17

	listlit -> '[' . ']'                                (rule 29)
	listlit -> '[' . explist ']'                        (rule 30)

	'if'           shift, and enter state 11
	var            shift, and enter state 12
	'-'            shift, and enter state 13
	'('            shift, and enter state 14
	double         shift, and enter state 15
	int            shift, and enter state 16
	'['            shift, and enter state 17
	']'            shift, and enter state 24
	lam            shift, and enter state 18

	aexp           goto state 4
	aexp1          goto state 5
	literal        goto state 6
	listlit        goto state 7
	explist        goto state 22
	fexp           goto state 8
	infixop        goto state 9
	exp            goto state 23

State 18

	aexp1 -> lam . arguments '->' exp                   (rule 25)

	var            reduce using rule 8
	double         reduce using rule 8
	int            reduce using rule 8
	'_'            reduce using rule 8
	'->'           reduce using rule 8

	arguments      goto state 20
	arguments_     goto state 21

State 19

	%start_parseModule -> module .                      (rule 0)

	%eof           accept


State 20

	aexp1 -> lam arguments . '->' exp                   (rule 25)

	'->'           shift, and enter state 50


State 21

	arguments -> arguments_ .                           (rule 6)
	arguments_ -> arguments_ . apat                     (rule 7)

	'='            reduce using rule 6
	var            shift, and enter state 46
	double         shift, and enter state 47
	int            shift, and enter state 48
	'_'            shift, and enter state 49
	'->'           reduce using rule 6

	apat           goto state 45

State 22

	listlit -> '[' explist . ']'                        (rule 30)
	explist -> explist . ',' exp                        (rule 32)

	','            shift, and enter state 43
	']'            shift, and enter state 44


State 23

	explist -> exp .                                    (rule 33)

	')'            reduce using rule 33
	','            reduce using rule 33
	']'            reduce using rule 33


State 24

	listlit -> '[' ']' .                                (rule 29)

	'let'          reduce using rule 29
	'of'           reduce using rule 29
	'if'           reduce using rule 29
	'then'         reduce using rule 29
	'else'         reduce using rule 29
	var            reduce using rule 29
	'-'            reduce using rule 29
	varop          reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29
	double         reduce using rule 29
	int            reduce using rule 29
	':'            reduce using rule 29
	','            reduce using rule 29
	'['            reduce using rule 29
	']'            reduce using rule 29
	lam            reduce using rule 29
	%eof           reduce using rule 29


State 25

	aexp -> '(' explist . ')'                           (rule 19)
	explist -> explist . ',' exp                        (rule 32)

	')'            shift, and enter state 42
	','            shift, and enter state 43


State 26

	aexp -> '(' ')' .                                   (rule 18)

	'let'          reduce using rule 18
	'of'           reduce using rule 18
	'if'           reduce using rule 18
	'then'         reduce using rule 18
	'else'         reduce using rule 18
	var            reduce using rule 18
	'-'            reduce using rule 18
	varop          reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	double         reduce using rule 18
	int            reduce using rule 18
	':'            reduce using rule 18
	','            reduce using rule 18
	'['            reduce using rule 18
	']'            reduce using rule 18
	lam            reduce using rule 18
	%eof           reduce using rule 18


State 27

	aexp -> '-' aexp .                                  (rule 20)
	listlit -> aexp . ':' aexp                          (rule 31)

	'let'          reduce using rule 20
	'of'           reduce using rule 20
	'if'           reduce using rule 20
	'then'         reduce using rule 20
	'else'         reduce using rule 20
	var            reduce using rule 20
	'-'            reduce using rule 20
	varop          reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	double         reduce using rule 20
	int            reduce using rule 20
	':'            shift, and enter state 33
			(reduce using rule 20)

	','            reduce using rule 20
	'['            reduce using rule 20
	']'            reduce using rule 20
	lam            reduce using rule 20
	%eof           reduce using rule 20


State 28

	aexp -> 'if' exp . 'then' exp 'else' exp            (rule 21)

	'then'         shift, and enter state 41


State 29

	infixop -> infixop op . fexp                        (rule 40)

	'if'           shift, and enter state 11
	var            shift, and enter state 12
	'-'            shift, and enter state 13
	'('            shift, and enter state 14
	double         shift, and enter state 15
	int            shift, and enter state 16
	'['            shift, and enter state 17
	lam            shift, and enter state 18

	aexp           goto state 4
	aexp1          goto state 5
	literal        goto state 6
	listlit        goto state 7
	fexp           goto state 40

State 30

	op -> varop .                                       (rule 38)

	'if'           reduce using rule 38
	var            reduce using rule 38
	'-'            reduce using rule 38
	'('            reduce using rule 38
	double         reduce using rule 38
	int            reduce using rule 38
	'['            reduce using rule 38
	lam            reduce using rule 38


State 31

	listlit -> aexp . ':' aexp                          (rule 31)
	appargs -> aexp .                                   (rule 37)

	'let'          reduce using rule 37
	'of'           reduce using rule 37
	'if'           reduce using rule 37
	'then'         reduce using rule 37
	'else'         reduce using rule 37
	var            reduce using rule 37
	'-'            reduce using rule 37
	varop          reduce using rule 37
	'('            reduce using rule 37
	')'            reduce using rule 37
	double         reduce using rule 37
	int            reduce using rule 37
	':'            shift, and enter state 33
			(reduce using rule 37)

	','            reduce using rule 37
	'['            reduce using rule 37
	']'            reduce using rule 37
	lam            reduce using rule 37
	%eof           reduce using rule 37


State 32

	fexp -> aexp appargs .                              (rule 34)
	appargs -> appargs . aexp                           (rule 36)

	'let'          reduce using rule 34
	'of'           reduce using rule 34
	'if'           shift, and enter state 11
			(reduce using rule 34)

	'then'         reduce using rule 34
	'else'         reduce using rule 34
	var            shift, and enter state 12
			(reduce using rule 34)

	'-'            shift, and enter state 13
			(reduce using rule 34)

	varop          reduce using rule 34
	'('            shift, and enter state 14
			(reduce using rule 34)

	')'            reduce using rule 34
	double         shift, and enter state 15
			(reduce using rule 34)

	int            shift, and enter state 16
			(reduce using rule 34)

	':'            reduce using rule 34
	','            reduce using rule 34
	'['            shift, and enter state 17
			(reduce using rule 34)

	']'            reduce using rule 34
	lam            shift, and enter state 18
			(reduce using rule 34)

	%eof           reduce using rule 34

	aexp           goto state 39
	aexp1          goto state 5
	literal        goto state 6
	listlit        goto state 7

State 33

	listlit -> aexp ':' . aexp                          (rule 31)

	'if'           shift, and enter state 11
	var            shift, and enter state 12
	'-'            shift, and enter state 13
	'('            shift, and enter state 14
	double         shift, and enter state 15
	int            shift, and enter state 16
	'['            shift, and enter state 17
	lam            shift, and enter state 18

	aexp           goto state 38
	aexp1          goto state 5
	literal        goto state 6
	listlit        goto state 7

State 34

	topdecls -> topdecls topdecl .                      (rule 3)

	'let'          reduce using rule 3
	%eof           reduce using rule 3


State 35

	topdecl -> letBinding .                             (rule 5)

	'let'          reduce using rule 5
	%eof           reduce using rule 5


State 36

	letBinding -> 'let' . var arguments '=' exp         (rule 16)
	letBinding -> 'let' . var ofcases                   (rule 17)

	var            shift, and enter state 37


State 37

	letBinding -> 'let' var . arguments '=' exp         (rule 16)
	letBinding -> 'let' var . ofcases                   (rule 17)

	'let'          reduce using rule 15
	'of'           reduce using rule 15
	'='            reduce using rule 8
	var            reduce using rule 8
	double         reduce using rule 8
	int            reduce using rule 8
	'_'            reduce using rule 8
	%eof           reduce using rule 15

	arguments      goto state 54
	arguments_     goto state 21
	ofcases        goto state 55
	ofcases_       goto state 56

State 38

	listlit -> aexp . ':' aexp                          (rule 31)
	listlit -> aexp ':' aexp .                          (rule 31)

	'let'          reduce using rule 31
	'of'           reduce using rule 31
	'if'           reduce using rule 31
	'then'         reduce using rule 31
	'else'         reduce using rule 31
	var            reduce using rule 31
	'-'            reduce using rule 31
	varop          reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31
	double         reduce using rule 31
	int            reduce using rule 31
	':'            shift, and enter state 33
			(reduce using rule 31)

	','            reduce using rule 31
	'['            reduce using rule 31
	']'            reduce using rule 31
	lam            reduce using rule 31
	%eof           reduce using rule 31


State 39

	listlit -> aexp . ':' aexp                          (rule 31)
	appargs -> appargs aexp .                           (rule 36)

	'let'          reduce using rule 36
	'of'           reduce using rule 36
	'if'           reduce using rule 36
	'then'         reduce using rule 36
	'else'         reduce using rule 36
	var            reduce using rule 36
	'-'            reduce using rule 36
	varop          reduce using rule 36
	'('            reduce using rule 36
	')'            reduce using rule 36
	double         reduce using rule 36
	int            reduce using rule 36
	':'            shift, and enter state 33
			(reduce using rule 36)

	','            reduce using rule 36
	'['            reduce using rule 36
	']'            reduce using rule 36
	lam            reduce using rule 36
	%eof           reduce using rule 36


State 40

	infixop -> infixop op fexp .                        (rule 40)

	'let'          reduce using rule 40
	'of'           reduce using rule 40
	'if'           reduce using rule 40
	'then'         reduce using rule 40
	'else'         reduce using rule 40
	var            reduce using rule 40
	'-'            reduce using rule 40
	varop          reduce using rule 40
	'('            reduce using rule 40
	')'            reduce using rule 40
	double         reduce using rule 40
	int            reduce using rule 40
	':'            reduce using rule 40
	','            reduce using rule 40
	'['            reduce using rule 40
	']'            reduce using rule 40
	lam            reduce using rule 40
	%eof           reduce using rule 40


State 41

	aexp -> 'if' exp 'then' . exp 'else' exp            (rule 21)

	'if'           shift, and enter state 11
	var            shift, and enter state 12
	'-'            shift, and enter state 13
	'('            shift, and enter state 14
	double         shift, and enter state 15
	int            shift, and enter state 16
	'['            shift, and enter state 17
	lam            shift, and enter state 18

	aexp           goto state 4
	aexp1          goto state 5
	literal        goto state 6
	listlit        goto state 7
	fexp           goto state 8
	infixop        goto state 9
	exp            goto state 53

State 42

	aexp -> '(' explist ')' .                           (rule 19)

	'let'          reduce using rule 19
	'of'           reduce using rule 19
	'if'           reduce using rule 19
	'then'         reduce using rule 19
	'else'         reduce using rule 19
	var            reduce using rule 19
	'-'            reduce using rule 19
	varop          reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	double         reduce using rule 19
	int            reduce using rule 19
	':'            reduce using rule 19
	','            reduce using rule 19
	'['            reduce using rule 19
	']'            reduce using rule 19
	lam            reduce using rule 19
	%eof           reduce using rule 19


State 43

	explist -> explist ',' . exp                        (rule 32)

	'if'           shift, and enter state 11
	var            shift, and enter state 12
	'-'            shift, and enter state 13
	'('            shift, and enter state 14
	double         shift, and enter state 15
	int            shift, and enter state 16
	'['            shift, and enter state 17
	lam            shift, and enter state 18

	aexp           goto state 4
	aexp1          goto state 5
	literal        goto state 6
	listlit        goto state 7
	fexp           goto state 8
	infixop        goto state 9
	exp            goto state 52

State 44

	listlit -> '[' explist ']' .                        (rule 30)

	'let'          reduce using rule 30
	'of'           reduce using rule 30
	'if'           reduce using rule 30
	'then'         reduce using rule 30
	'else'         reduce using rule 30
	var            reduce using rule 30
	'-'            reduce using rule 30
	varop          reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30
	double         reduce using rule 30
	int            reduce using rule 30
	':'            reduce using rule 30
	','            reduce using rule 30
	'['            reduce using rule 30
	']'            reduce using rule 30
	lam            reduce using rule 30
	%eof           reduce using rule 30


State 45

	arguments_ -> arguments_ apat .                     (rule 7)

	'='            reduce using rule 7
	var            reduce using rule 7
	double         reduce using rule 7
	int            reduce using rule 7
	'_'            reduce using rule 7
	'->'           reduce using rule 7


State 46

	apat -> var .                                       (rule 9)

	'='            reduce using rule 9
	var            reduce using rule 9
	double         reduce using rule 9
	int            reduce using rule 9
	'_'            reduce using rule 9
	'->'           reduce using rule 9


State 47

	apat -> double .                                    (rule 12)

	'='            reduce using rule 12
	var            reduce using rule 12
	double         reduce using rule 12
	int            reduce using rule 12
	'_'            reduce using rule 12
	'->'           reduce using rule 12


State 48

	apat -> int .                                       (rule 11)

	'='            reduce using rule 11
	var            reduce using rule 11
	double         reduce using rule 11
	int            reduce using rule 11
	'_'            reduce using rule 11
	'->'           reduce using rule 11


State 49

	apat -> '_' .                                       (rule 10)

	'='            reduce using rule 10
	var            reduce using rule 10
	double         reduce using rule 10
	int            reduce using rule 10
	'_'            reduce using rule 10
	'->'           reduce using rule 10


State 50

	aexp1 -> lam arguments '->' . exp                   (rule 25)

	'if'           shift, and enter state 11
	var            shift, and enter state 12
	'-'            shift, and enter state 13
	'('            shift, and enter state 14
	double         shift, and enter state 15
	int            shift, and enter state 16
	'['            shift, and enter state 17
	lam            shift, and enter state 18

	aexp           goto state 4
	aexp1          goto state 5
	literal        goto state 6
	listlit        goto state 7
	fexp           goto state 8
	infixop        goto state 9
	exp            goto state 51

State 51

	aexp1 -> lam arguments '->' exp .                   (rule 25)

	'let'          reduce using rule 25
	'of'           reduce using rule 25
	'if'           reduce using rule 25
	'then'         reduce using rule 25
	'else'         reduce using rule 25
	var            reduce using rule 25
	'-'            reduce using rule 25
	varop          reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	double         reduce using rule 25
	int            reduce using rule 25
	':'            reduce using rule 25
	','            reduce using rule 25
	'['            reduce using rule 25
	']'            reduce using rule 25
	lam            reduce using rule 25
	%eof           reduce using rule 25


State 52

	explist -> explist ',' exp .                        (rule 32)

	')'            reduce using rule 32
	','            reduce using rule 32
	']'            reduce using rule 32


State 53

	aexp -> 'if' exp 'then' exp . 'else' exp            (rule 21)

	'else'         shift, and enter state 59


State 54

	letBinding -> 'let' var arguments . '=' exp         (rule 16)

	'='            shift, and enter state 58


State 55

	letBinding -> 'let' var ofcases .                   (rule 17)

	'let'          reduce using rule 17
	%eof           reduce using rule 17


State 56

	ofcases -> ofcases_ .                               (rule 13)
	ofcases_ -> ofcases_ . 'of' arguments '=' exp       (rule 14)

	'let'          reduce using rule 13
	'of'           shift, and enter state 57
	%eof           reduce using rule 13


State 57

	ofcases_ -> ofcases_ 'of' . arguments '=' exp       (rule 14)

	'='            reduce using rule 8
	var            reduce using rule 8
	double         reduce using rule 8
	int            reduce using rule 8
	'_'            reduce using rule 8

	arguments      goto state 62
	arguments_     goto state 21

State 58

	letBinding -> 'let' var arguments '=' . exp         (rule 16)

	'if'           shift, and enter state 11
	var            shift, and enter state 12
	'-'            shift, and enter state 13
	'('            shift, and enter state 14
	double         shift, and enter state 15
	int            shift, and enter state 16
	'['            shift, and enter state 17
	lam            shift, and enter state 18

	aexp           goto state 4
	aexp1          goto state 5
	literal        goto state 6
	listlit        goto state 7
	fexp           goto state 8
	infixop        goto state 9
	exp            goto state 61

State 59

	aexp -> 'if' exp 'then' exp 'else' . exp            (rule 21)

	'if'           shift, and enter state 11
	var            shift, and enter state 12
	'-'            shift, and enter state 13
	'('            shift, and enter state 14
	double         shift, and enter state 15
	int            shift, and enter state 16
	'['            shift, and enter state 17
	lam            shift, and enter state 18

	aexp           goto state 4
	aexp1          goto state 5
	literal        goto state 6
	listlit        goto state 7
	fexp           goto state 8
	infixop        goto state 9
	exp            goto state 60

State 60

	aexp -> 'if' exp 'then' exp 'else' exp .            (rule 21)

	'let'          reduce using rule 21
	'of'           reduce using rule 21
	'if'           reduce using rule 21
	'then'         reduce using rule 21
	'else'         reduce using rule 21
	var            reduce using rule 21
	'-'            reduce using rule 21
	varop          reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21
	double         reduce using rule 21
	int            reduce using rule 21
	':'            reduce using rule 21
	','            reduce using rule 21
	'['            reduce using rule 21
	']'            reduce using rule 21
	lam            reduce using rule 21
	%eof           reduce using rule 21


State 61

	letBinding -> 'let' var arguments '=' exp .         (rule 16)

	'let'          reduce using rule 16
	%eof           reduce using rule 16


State 62

	ofcases_ -> ofcases_ 'of' arguments . '=' exp       (rule 14)

	'='            shift, and enter state 63


State 63

	ofcases_ -> ofcases_ 'of' arguments '=' . exp       (rule 14)

	'if'           shift, and enter state 11
	var            shift, and enter state 12
	'-'            shift, and enter state 13
	'('            shift, and enter state 14
	double         shift, and enter state 15
	int            shift, and enter state 16
	'['            shift, and enter state 17
	lam            shift, and enter state 18

	aexp           goto state 4
	aexp1          goto state 5
	literal        goto state 6
	listlit        goto state 7
	fexp           goto state 8
	infixop        goto state 9
	exp            goto state 64

State 64

	ofcases_ -> ofcases_ 'of' arguments '=' exp .       (rule 14)

	'let'          reduce using rule 14
	'of'           reduce using rule 14
	%eof           reduce using rule 14


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 42
Number of terminals: 21
Number of non-terminals: 21
Number of states: 65
